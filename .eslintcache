[{"C:\\Users\\Rennie\\kanban\\src\\index.js":"1","C:\\Users\\Rennie\\kanban\\src\\App.js":"2","C:\\Users\\Rennie\\kanban\\src\\column.js":"3","C:\\Users\\Rennie\\kanban\\src\\Task.js":"4"},{"size":221,"mtime":1607399980856,"results":"5","hashOfConfig":"6"},{"size":2467,"mtime":1609107611062,"results":"7","hashOfConfig":"6"},{"size":1386,"mtime":1609107831671,"results":"8","hashOfConfig":"6"},{"size":747,"mtime":1609107930852,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"5lea1t",{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Rennie\\kanban\\src\\index.js",[],["20","21"],"C:\\Users\\Rennie\\kanban\\src\\App.js",["22"],"\nimport './App.css';\nimport React, { Component } from 'react'\nimport { v4 as uuid } from 'uuid';  //used to create keys \nimport {DragDropContext} from 'react-beautiful-dnd'\n\nimport Column from \"./column\";\n\nconst itemsFromBackend = [\n\n  {id : uuid(), content : 'First Task', date : Date.now()}, \n\n  {id : uuid(), content : 'Second Task', date : Date.now()},  \n\n  {id : uuid(), content : 'Third Task', date : Date.now()}\n\n\n]\n\n\nconst columnsFromBackend =    //mockup data/ placeholder for actual api \n\n [\n    {\n      id : uuid(),\n      columnName : \"Todo\",\n      emoji : \"ðŸ’¡\",\n      tasks : itemsFromBackend\n    }\n   \n\n ]\n\n\n\n\n\n\nexport default class App extends Component {\n\n\n  constructor(props) {   \n    super(props);    \n    this.state = {columns: columnsFromBackend};  \n  }\n      onDragEnd = result =>{\n          const {destination, source, Draggable} = result;\n\n\n          if (destination === null) \n           return;\n\n          if (destination.droppableId === source.droppableId && destination.index === source.index)\n           return;\n\n\n         const column = this.state.columns.find((col)=>{ //find will always only return 1 element because it only looks for the first element that matches the parameters\n\n            \n                    return col.id === source.droppableId;\n           })\n\n\n\n         \n          const task = column.tasks[source.index];\n          \n          \n          const newTasks = Array.from(column.tasks);  //creates clone of task located in the column\n          newTasks.splice(source.index, 1); //remove the item located at this index\n          newTasks.splice(destination.index, 0, task); //inserts the task at the destination index (does not delete/remove anything a.k.a everything gets shifted for the added task)\n\n\n\n          const newColumn = {...column, tasks : newTasks}\n\n\n          const newState = this.state.columns.splice() //copys everything but overwrites anything that was stored in a specific column based on its index.\n\n\n          newState[this.state.columns.findIndex((col)=>{return col.id === source.droppableId})] = newColumn \n    \n       \n          this.setState({columns : newState});\n\n      }\n\n\n  render() {\n    return (\n  \n      <DragDropContext onDragEnd={this.onDragEnd} >\n     \n\n          {\n          \n       \n            this.state.columns.map( (col) =>{\n\n          \n              return (<Column key={col.id} column={col}/>)\n\n          })}\n            \n        \n     \n      </DragDropContext>\n    )\n  }\n}","C:\\Users\\Rennie\\kanban\\src\\column.js",[],"C:\\Users\\Rennie\\kanban\\src\\Task.js",[],{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":47,"column":39,"nodeType":"29","messageId":"30","endLine":47,"endColumn":48},"no-native-reassign",["31"],"no-negated-in-lhs",["32"],"no-unused-vars","'Draggable' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]